using System;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web.Mvc;
using TrailerManagement.Models;

namespace TrailerManagement.Controllers
{
    public class EmailController : Controller
    {
        public ActionResult NewPayout(int sortID)
        {
            using (TrailerEntities db = new TrailerEntities())
            {
                var sortedTrailer = db.SortLists.FirstOrDefault(s => s.SortGUID == sortID);

                SmtpClient client = new SmtpClient("smtp.outlook.com", 587);
                client.EnableSsl = true;
                client.Timeout = 100000;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.UseDefaultCredentials = false;
                client.Credentials = new NetworkCredential("grant.vonhaden@palletusa.com", Properties.Settings.Default.EmailPassword);
                
                string vendor;
                string trailerNumber;
                string body;
                if(sortedTrailer.Vendor != null)
                {
                    vendor = sortedTrailer.Vendor.ToString().ToLower();
                    body = "Nancy,<br><br> " + "A new payout was created for " + vendor + "<br><br> This is an autogenerated message.";
                }
                else
                {
                    trailerNumber = sortedTrailer.TrailerNumber;
                    body = "Nancy,<br><br> " + "A new payout was created for trailer number" + trailerNumber + " with no vendor attached. <br><br> This is an autogenerated message.";
                }
                
                //MailMessage message = new MailMessage("grant.vonhaden@palletusa.com", "grant.vonhaden@palletusa.com", "New Payout", body);

                //uncomment to send emails to nancy
                string nancyEmail = "nancy.waddell@palletusa.com";
                MailMessage message = new MailMessage("grant.vonhaden@palletusa.com", nancyEmail, "New Payout", body);
                message.IsBodyHtml = true;
                message.BodyEncoding = UTF8Encoding.UTF8;
                //uncomment to send emails to nancy
                client.Send(message);
                
                if (sortedTrailer != null)
                {
                    sortedTrailer.Status = "CLOSED";

                    var date = DateTime.Now;
                    sortedTrailer.DateCompleted = date.ToString("yyyy-MM-dd");

                    db.SaveChanges();
                }
                return RedirectToAction(actionName: "SortList", controllerName: "PalletRepair");
            }
        }
        
        public ActionResult CompletePayout(int sortID)
        {
            using (TrailerEntities db = new TrailerEntities())
            {
                var payout = db.Payouts.FirstOrDefault(p => p.SortGUID == sortID);
                DateTime date = DateTime.Now;
                var currentDate = date.ToString("yyyy-MM-dd");
                
                payout.DateCompleted = currentDate;
                db.SaveChanges();

                SmtpClient client = new SmtpClient("smtp.outlook.com", 587);
                client.EnableSsl = true;
                client.Timeout = 100000;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.UseDefaultCredentials = false;
                client.Credentials = new NetworkCredential("grant.vonhaden@palletusa.com", Properties.Settings.Default.EmailPassword);

                string vendor;
                string body = "";
                if (payout.Vendor != null)
                {
                    vendor = payout.Vendor.ToString();
                    body = "A new completed payout was created for " + vendor + "<br><br> <a href=\"trailermanagement.palletusa.local/PalletRepair/ViewCompletedPayout?sortID=" + sortID.ToString() + "\"> Click to view </a><br><br> This is an autogenerated message.";
                }
                else
                {
                    body = "A new completed payout was created <br><br> <a href=\"trailermanagement.palletusa.local/PalletRepair/ViewCompletedPayout?sortID=" + sortID.ToString() + "\"> Click to view </a><br><br> This is an autogenerated message.";
                }

                //MailMessage message = new MailMessage("grant.vonhaden@palletusa.com", "grant.vonhaden@palletusa.com", "New Payout", body);

                string accountingEmail = "accounting@palletusa.com";
                MailMessage message = new MailMessage("grant.vonhaden@palletusa.com", accountingEmail, "New Payout", body);
                message.IsBodyHtml = true;
                message.BodyEncoding = UTF8Encoding.UTF8;
                //uncomment to send emails to ginger
                client.Send(message);
                
                return RedirectToAction(actionName: "ViewCompletedPayout", controllerName: "PalletRepair", routeValues: new { sortID });
            }
        }

        public ActionResult DriverDeliverNotes(int driverConcernID)
        {
            using (TrailerEntities db = new TrailerEntities())
            {
                SmtpClient client = new SmtpClient("smtp.outlook.com", 587);
                client.EnableSsl = true;
                client.Timeout = 100000;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.UseDefaultCredentials = false;
                client.Credentials = new NetworkCredential("grant.vonhaden@palletusa.com", Properties.Settings.Default.EmailPassword);

                var concern = db.DriverConcerns.FirstOrDefault(c => c.DriverConcernGUID == driverConcernID);
                concern.Status = "CLOSED";
                db.SaveChanges();

                string customerServiceEmail = "CustomerService@palletusa.com";
                string body = "The following customer information was recorded during a delivery, taken by " + concern.DateTaken + ". <br><br> <a href=\"trailermanagement.palletusa.local/Trailer/DriverConcern?driverConcernID=" + driverConcernID + "\"> Click to view </a><br><br> This is an autogenerated message.";
                MailMessage message = new MailMessage("grant.vonhaden@palletusa.com", customerServiceEmail, "Driver Delivery Notes", body);
                //MailMessage message = new MailMessage("grant.vonhaden@palletusa.com", "grant.vonhaden@palletusa.com", "Driver Delivery Notes", body);
                message.IsBodyHtml = true;
                message.BodyEncoding = UTF8Encoding.UTF8;

                //uncomment to send emails to customer service
                client.Send(message);
                
                return RedirectToAction(actionName: "Index", controllerName: "Home");
            }
        }
    }
}